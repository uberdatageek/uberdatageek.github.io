//MAIN
// Will be used to the save the loaded JSON data
var allData = [];

// Date parser to convert strings to date objects
var parseDate = d3.time.format("%Y").parse;

// Set ordinal color scale
var colorScale = d3.scale.category20();

// Variables for the visualization instances
var areachart, timeline;


// Start application by loading the data
loadData();

function loadData() {
    d3.json("data/uk-household-purchases.json", function(error, jsonData){
        if(!error){
            allData = jsonData;

            // Convert Pence Sterling (GBX) to USD and years to date objects
            allData.layers.forEach(function(d){
                for (var column in d) {
                    if (d.hasOwnProperty(column) && column != "Year") {
                        d[column] = parseFloat(d[column]) * 1.481105 / 100;
                    } else if(d.hasOwnProperty(column) && column == "Year") {
                        d[column] = parseDate(d[column].toString());
                    }
                }
            });

            allData.years.forEach(function(d){
                d.Expenditures = parseFloat(d.Expenditures) * 1.481105 / 100;
                d.Year = parseDate(d.Year.toString());
            });


            // Update color scale (all column headers except "Year")
            // We will use the color scale later for the stacked area chart
            colorScale.domain(d3.keys(allData.layers[0]).filter(function(d){ return d != "Year"; }))

            createVis();
        }
    });
}

function createVis() {

    // TO-DO: Instantiate visualization objects here
    // areachart = new ...
    areachart = new StackedAreaChart("stacked-area-chart", allData.layers);
    timeline = new Timeline("timeline", allData.years);
}


function brushed() {

    // TO-DO: React to 'brushed' event
    // Set new domain if brush (user selection) is not empty
    //console.log(timeline.brush);

    //important to make brush & xContext into local variable (with keyword this)
    areachart.x.domain(
        timeline.brush.empty() ? timeline.xContext.domain() : timeline.brush.extent()
    );

    // Update focus chart (detailed information)
    areachart.wrangleData();

}





























/*
 * StackedAreaChart - Object constructor function
 * @param _parentElement 	-- the HTML element in which to draw the visualization
 * @param _data						-- the
 */

StackedAreaChart = function(_parentElement, _data){
    this.parentElement = _parentElement;
    this.data = _data;
    this.displayData = []; // see data wrangling

    // DEBUG RAW DATA
    console.log(this.data);

    this.initVis();
}



/*
 * Initialize visualization (static content, e.g. SVG area or axes)
 */

StackedAreaChart.prototype.initVis = function(){
    var vis = this;

    vis.margin = { top: 40, right: 0, bottom: 60, left: 60 };

    vis.width = 800 - vis.margin.left - vis.margin.right,
        vis.height = 400 - vis.margin.top - vis.margin.bottom;


    // SVG drawing area
    vis.svg = d3.select("#" + vis.parentElement).append("svg")
        .attr("width", vis.width + vis.margin.left + vis.margin.right)
        .attr("height", vis.height + vis.margin.top + vis.margin.bottom)
        .append("g")
        .attr("transform", "translate(" + vis.margin.left + "," + vis.margin.top + ")");

    //Prepping data
    var dataCategories = colorScale.domain();

    // Rearrange data into layers
    var transposedData = dataCategories.map(function(name) {
        return {
            name: name,
            values: vis.data.map(function(d) {
                return {Year: d.Year, y: d[name]};
            }) };
    });




    // TO-DO: Overlay with path clipping
    vis.svg.append("defs").append("clipPath")
        .attr("id", "clip")
        .append("rect")
        .attr("width", vis.width)
        .attr("height", vis.height);



    // Scales and axes
    vis.x = d3.time.scale()
        .range([0, vis.width])
        .domain(d3.extent(vis.data, function(d) { return d.Year; }));

    var x = vis.x;

    vis.y = d3.scale.linear()
        .range([vis.height, 0]);

    var y = vis.y;

    vis.xAxis = d3.svg.axis()
        .scale(vis.x)
        .orient("bottom");

    vis.yAxis = d3.svg.axis()
        .scale(vis.y)
        .orient("left");

    vis.svg.append("g")
        .attr("class", "x-axis axis")
        .attr("transform", "translate(0," + vis.height + ")");

    vis.svg.append("g")
        .attr("class", "y-axis axis");


    // TO-DO: Initialize stack layout
    var stack = d3.layout.stack()
        .offset("zero")
        .values(function(d) { return d.values; });

    vis.stackedData = stack(transposedData);


    // TO-DO: Stacked area layout
    // vis.area = d3.svg.area()
    vis.area = d3.svg.area()
        .interpolate("cardinal")
        .x(function(d) { return x(d.Year); })
        .y0(function(d) { return y(d.y0); })
        .y1(function(d) { return y(d.y0 + d.y); });


    // TO-DO: Tooltip placeholder
    /**/
    vis.svg.selectAll("path")
        .append("title");



    // TO-DO: (Filter, aggregate, modify data)
    vis.wrangleData();
}



/*
 * Data wrangling
 */

StackedAreaChart.prototype.wrangleData = function(){
    var vis = this;

    // In the first step no data wrangling/filtering needed
    vis.displayData = vis.stackedData;

    console.log(vis.displayData);

    // Update the visualization
    vis.updateVis();
}



/*
 * The drawing function - should use the D3 update sequence (enter, update, exit)
 * Function parameters only needed if different kinds of updates are needed
 */

StackedAreaChart.prototype.updateVis = function(){
    var vis = this;

    // Update domain
    // Get the maximum of the multi-dimensional array or in other words, get the highest peak of the uppermost layer
    vis.y.domain([0, d3.max(vis.displayData, function(d) {
        return d3.max(d.values, function(e) {
            return e.y0 + e.y;
        });
    })
    ]);


    // Draw the layers
    var categories = vis.svg.selectAll(".area")
        .data(vis.displayData);

    categories.enter().append("path")
        .attr("class", "area");

    categories
        .style("fill", function(d) {
            return colorScale(d.name);
        })
        .attr("d", function(d) {
            return vis.area(d.values);
        })

    //TO-DO tooltip
    categories
        .append("title")
        .text(function(d) { return d.name; });

    categories.exit().remove();


    // Call axis functions with the new domain
    vis.svg.select(".x-axis").call(vis.xAxis);
    vis.svg.select(".y-axis").call(vis.yAxis);
}
